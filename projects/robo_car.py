# Aufgaben## +++ 1) Messen mit einem Ultraschallentfernungssensor (HC-SR04).# +++ 2) Ansteuerung der Motoren# +++ 3) Ansteuerung der Motoren in Abhaengigkeit der Entfernung# Bibliotheken und Klassenfrom machine import Pin, Timerfrom time import sleepfrom random import choicefrom hcsr04 import HCSR04from motor import Motor# Globale Variablenspeed_m1 = 0.5speed_m2 = 0.5# Pinnummern beziehen sich auf Wemos S2 mini# GPIOs zur Ansteuerung der Motorenpin_m1a = 37  # motor 1pin_m1b = 38  # motor 1pin_m2a = 39  # motor 2pin_m2b = 40  # motor 2# GPIOs des Abstanzsensorspin_trigger = 17pin_echo = 16# Hier bgeinnt das Hauptprogrammdef start():    # Erzeugen einer Instanz der Motor-Klasse    # aktivieren von PWM and zuweisen der Pin-Factory    # +++ 2) +++    motor1 = Motor(pin_m1a, pin_m1b, pwm=True)    motor2 = Motor(pin_m2a, pin_m2b, pwm=True)    # Erzeugen einer Instanz der Distanzsensor-Klasse    # +++ 1) +++    sensor = HCSR04(trigger_pin=pin_trigger, echo_pin=pin_echo, echo_timeout_us=10000)    # Try-Catch-Block    try:        # Schleife so lange durchlaufen bis das Programm beendet wird (langer Tastendruck)        while True:            # Schreibe Sensormesswert (cm) auf die Konsole (kann spaeter wieder auskommentiert werden)            # +++ 1) +++            #print(sensor.distance_cm())            # Ist der Sensormesswert (cm) kleiner 40 cm?            # +++ 3) +++            # messe Entfernung            if sensor.distance_cm() < 40:                # alle Motoren stop                # +++ 3) +++                motor1.stop()                motor2.stop()                # eine 1/2 Sekunde warten                sleep(0.5)                # Waehle zufaellig eine Drehrichtung                if choice([0, 1]):   # +++ 3) +++ einkommentieren                    # Robo dreht mit 1/2 Leistung in die eine Richtung                    # +++ 3) +++                    motor1.forward(speed_m1)                    motor2.backward(speed_m2)                else:   # +++ 3) +++ einkommentieren                    # Robo dreht mit 1/2 Leistung in die andere Richtung                    # +++ 3) +++                    motor1.backward(speed_m1)                    motor2.forward(speed_m2)                # Lass den Robo eine 1/2 Sekunde drehen                sleep(0.5)                # alle Motoren stop                # +++ 3) +++                motor1.stop()                motor2.stop()                # eine 1/2 Sekunde warten                sleep(0.5)            else:   # +++ 2) +++ einkommentieren                # fahre Robo mit 1/2 Leistung vorwaerts                # +++ 2) +++                motor1.forward(speed_m1)                motor2.forward(speed_m2)    # Fangen eines Fehlers/Signals    except KeyboardInterrupt:        print("Programm abgebrochen.")    # Dieser Block wird immer ausgefuehrt: zum Schluss muss man aufraeumen    finally:        # Motoren aus        motor1.stop()        motor2.stop()        print("Programm beendet.")if __name__ == '__main__':    start()